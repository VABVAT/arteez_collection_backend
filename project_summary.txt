## Database Schema

```prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model dresses {
  id             Int          @id @default(autoincrement())
  name           String       @db.VarChar(255)
  price          Int
  original_price Int?
  rating         Int?
  reviews        Int?
  image          String?
  description    String?
  quantity       Int?         @default(0)
  sizes          dress_size[]
  orders         OrderDresses[]
}

enum dress_size {
  XS
  S
  M
  L
  XL
  XXL
}

model User {
  id       String  @id @default(cuid())
  name     String
  email    String
  phone    String  @unique
  address  String
  password String
  orders   Order[]
}

model Order {
  id                String       @id @default(cuid())
  razorpayOrderId   String       @unique
  status            String
  amount            Int
  currency          String
  addressTo         String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  completedAt       DateTime?
  userId            String
  user              User         @relation(fields: [userId], references: [id])
  dresses           OrderDresses[]
  payment           Payment?
}

model OrderDresses {
  id        Int        @id @default(autoincrement())
  order     Order      @relation(fields: [orderId], references: [id])
  orderId   String
  dress     dresses    @relation(fields: [dressId], references: [id])
  dressId   Int
  size      dress_size
}

model Payment {
  id                String   @id @default(cuid())
  razorpayPaymentId String   @unique
  razorpaySignature String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  orderId           String   @unique
  order             Order    @relation(fields: [orderId], references: [id])
}
```

## API Endpoints

### User

*   `POST /api/register`
    *   **Description:** Register a new user.
    *   **Request Body:** `{ "name": "John Doe", "email": "john.doe@example.com", "phone": "1234567890", "address": "123 Main St", "password": "password123" }`
    *   **Response:** User object.
*   `POST /api/login`
    *   **Description:** Login a user.
    *   **Request Body:** `{ "phone": "1234567890", "password": "password123" }`
    *   **Response:** `{ "token": "jwt_token" }`
*   `GET /api/users/me`
    *   **Description:** Get the current user's details.
    *   **Authentication:** JWT required.
    *   **Response:** User object (`id`, `name`, `email`, `phone`, `address`).
*   `PUT /api/users/me/address`
    *   **Description:** Update the current user's address.
    *   **Authentication:** JWT required.
    *   **Request Body:** `{ "address": "456 New St" }`
    *   **Response:** User object.

### Order

*   `POST /api/orders`
    *   **Description:** Create a new order.
    *   **Authentication:** JWT required.
    *   **Request Body:** `{ "amount": 1000, "currency": "INR", "dresses": [{ "dressId": 1, "size": "M" }] }`
    *   **Response:** Order object.
*   `POST /api/orders/payment/verify`
    *   **Description:** Verify a Razorpay payment.
    *   **Request Body:** `{ "orderId": "razorpay_order_id", "paymentId": "razorpay_payment_id", "signature": "razorpay_signature" }`
    *   **Response:** `{ "status": "success" }` or `{ "status": "failure" }`.
*   `GET /api/orders/me`
    *   **Description:** Get the current user's paid orders.
    *   **Authentication:** JWT required.
    *   **Response:** Array of order objects.

### Dresses

*   `GET /api/dresses`
    *   **Description:** Get all dresses.
    *   **Response:** Array of dress objects.
